name: snowflake-devops-demo

on:
  push:
    branches:
      - dev
      - test
      - main
    paths:
      - '**/migrations/**'
  workflow_dispatch:

jobs:
  deploy-layer-changes:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Use Python 3.8.x
        uses: actions/setup-python@v2.2.1
        with:
          python-version: 3.8.x

      - name: Install dependencies
        run: pip install pyyaml schemachange

      - name: Deploy layer changes
        env:
          SF_ACCOUNT: ${{ secrets.SF_ACCOUNT }}
          SF_USERNAME: ${{ secrets.SF_USERNAME }}
          SF_ROLE: ${{ secrets.SF_ROLE }}
          SF_WAREHOUSE: ${{ secrets.SF_WAREHOUSE }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SF_PASSWORD }}
        run: |
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          # Get layers from Python script and filter valid schemas
          echo "Checking for schemas.yml in $GITHUB_WORKSPACE/config/schemas.yml"
          raw_layers=$(python $GITHUB_WORKSPACE/config/get_schemas.py)
          if [ $? -ne 0 ]; then
            echo "Error: Failed to extract schemas, exiting"
            exit 1
          fi
          # Filter out debug lines and split into array
          mapfile -t layers < <(echo "$raw_layers" | grep -E '^[a-zA-Z0-9_-]+$' || true)
          if [ ${#layers[@]} -eq 0 ]; then
            echo "Error: No valid schemas extracted, exiting"
            exit 1
          fi
          echo "Schemas extracted from schemas.yml: ${layers[@]}"
          echo "Detected layers: $(find "$GITHUB_WORKSPACE" -maxdepth 1 -type d ! -name ".*" -exec sh -c 'test -d "{}/migrations" && echo {}' \; | sed 's|.*/||')"
          echo "Processing layers in order: ${layers[@]}"
          # Initialize or load execution log
          log_file="$GITHUB_WORKSPACE/execution_log.yml"
          if [ ! -f "$log_file" ]; then
            echo "executions: []" > "$log_file"
            echo "Created execution_log.yml"
          fi
          for layer in "${layers[@]}"; do
            echo "Step 1: Processing $layer layer"
            var_file="$GITHUB_WORKSPACE/$layer/migrations/${layer}-var.yml"
            if [ -f "$var_file" ] && [ -r "$var_file" ]; then
              echo "Parsing variables from $var_file"
              vars=$(python $GITHUB_WORKSPACE/parse_vars.py "$var_file" 2> debug_$layer.log)
              echo "Parsed vars: $vars"
              if [ -z "$vars" ] || ! echo "$vars" | python -c "import json; json.loads(input())" 2>/dev/null; then
                echo "Error: Invalid or empty vars JSON: $vars"
                cat debug_$layer.log
                vars='{"sf_database": "SF_DEVOPS_DEV_DB", "sf_schema": "'$layer'", "new_var": "'$layer'_value"}'
              fi
              database_name=$(echo "$vars" | python -c "import json, sys; print(json.loads(sys.stdin.read())['sf_database'])")
              schema_name=$(echo "$vars" | python -c "import json, sys; print(json.loads(sys.stdin.read())['sf_schema'])")
              echo "Extracted database_name: $database_name"
              echo "Extracted schema_name: $schema_name"
              echo "Step 2: Running schemachange for $layer with vars: $vars"
              ls -la "$GITHUB_WORKSPACE/$layer/migrations/scripts"  # Debug: List scripts
              schemachange_output=$(schemachange \
                -f "$GITHUB_WORKSPACE/$layer/migrations/scripts" \
                -a "$SF_ACCOUNT" \
                -u "$SF_USERNAME" \
                -r "$SF_ROLE" \
                -w "$SF_WAREHOUSE" \
                -d "$database_name" \
                -c "$database_name.SCHEMACHANGE.CHANGE_HISTORY" \
                --create-change-history-table \
                --config-folder "$GITHUB_WORKSPACE/$layer/migrations/config" \
                --vars "$vars" 2>&1)
              echo "schemachange output: $schemachange_output"  # Debug output
              # Log entry even if no scripts applied, with a flag
              commit_msg=$(git log -1 --pretty=format:%s || echo "No commit message")
              # Generate version (simple increment based on existing log)
              if [ -f "$log_file" ]; then
                current_version=$(yq eval '.executions[0].version' "$log_file" | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+' || echo "0.0.0")
                new_version=$(echo "$current_version" | awk -F. '{$NF++; print $1"."$2"."$NF}')
              else
                new_version="0.0.1"
              fi
              # Create new entry
              new_entry="  - version: \"$new_version\"\n    layer: \"$layer\"\n    location: \"$GITHUB_WORKSPACE/$layer/migrations/scripts\"\n    commit_msg: \"$commit_msg\"\n    timestamp: \"$(date -u +'%Y-%m-%dT%H:%M:%SZ')\"\n    applied: $(echo "$schemachange_output" | grep -q "scripts_applied=[1-9]" && echo "true" || echo "false")"
              # Prepend to log file safely
              if [ -f "$log_file" ]; then
                tmp_file=$(mktemp)
                echo "executions:" > "$tmp_file"
                echo "$new_entry" >> "$tmp_file"
                tail -n +2 "$log_file" >> "$tmp_file"
                mv "$tmp_file" "$log_file"
              else
                echo "executions:" > "$log_file"
                echo "$new_entry" >> "$log_file"
              fi
              echo "Updated execution log with version $new_version for $layer (applied: $(echo "$schemachange_output" | grep -q "scripts_applied=[1-9]" && echo "true" || echo "false"))"
            else
              echo "Error: $var_file not found or not readable, skipping $layer"
            fi
          done

      - name: Commit and push execution log
        run: |
          if [ -f "$GITHUB_WORKSPACE/execution_log.yml" ]; then
            git config --global user.name "GitHub Action"
            git config --global user.email "action@github.com"
            # Add a timestamp to force a change if no scripts applied
            timestamp=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            if ! grep -q "$timestamp" "$GITHUB_WORKSPACE/execution_log.yml"; then
              echo "# Last run: $timestamp" >> "$GITHUB_WORKSPACE/execution_log.yml"
            fi
            git add "$GITHUB_WORKSPACE/execution_log.yml"
            git commit -m "Update execution_log.yml with latest deployment [skip ci]" || echo "No changes to commit"
            # Use PERSONAL_ACCESS_TOKEN for push
            git push https://${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository }}.git HEAD:dev 2>/dev/null || echo "Push failed, check your PAT or repo permissions."
            echo "Pushed execution_log.yml to repo (or attempted, check logs)"
          else
            echo "execution_log.yml not found, nothing to commit"
          fi
