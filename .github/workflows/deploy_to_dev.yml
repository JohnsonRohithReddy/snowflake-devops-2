name: snowflake-devops-demo

on:
  push:
    branches:
      - dev
      - test
      - main
    paths:
      - '**/migrations/**'
  workflow_dispatch:

jobs:
  deploy-layer-changes:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Use Python 3.8.x
        uses: actions/setup-python@v2.2.1
        with:
          python-version: 3.8.x

      - name: Install dependencies
        run: |
          pip install pyyaml schemachange
          # Install yq for YAML processing
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
          # Verify yq installation
          yq --version

      - name: Deploy layer changes
        env:
          SF_ACCOUNT: ${{ secrets.SF_ACCOUNT }}
          SF_USERNAME: ${{ secrets.SF_USERNAME }}
          SF_ROLE: ${{ secrets.SF_ROLE }}
          SF_WAREHOUSE: ${{ secrets.SF_WAREHOUSE }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SF_PASSWORD }}
        run: |
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          # Get layers from Python script and filter valid schemas
          echo "Checking for schemas.yml in $GITHUB_WORKSPACE/config/schemas.yml"
          raw_layers=$(python $GITHUB_WORKSPACE/config/get_schemas.py)
          if [ $? -ne 0 ]; then
            echo "Error: Failed to extract schemas, exiting"
            exit 1
          fi
          # Filter out debug lines and split into array
          mapfile -t layers < <(echo "$raw_layers" | grep -E '^[a-zA-Z0-9_-]+$' || true)
          if [ ${#layers[@]} -eq 0 ]; then
            echo "Error: No valid schemas extracted, exiting"
            exit 1
          fi
          echo "Schemas extracted from schemas.yml: ${layers[@]}"
          echo "Detected layers: $(find "$GITHUB_WORKSPACE" -maxdepth 1 -type d ! -name ".*" -exec sh -c 'test -d "{}/migrations" && echo {}' \; | sed 's|.*/||')"
          echo "Processing layers in order: ${layers[@]}"
          for layer in "${layers[@]}"; do
            echo "Step 1: Processing $layer layer"
            var_file="$GITHUB_WORKSPACE/$layer/migrations/${layer}-var.yml"
            if [ -f "$var_file" ] && [ -r "$var_file" ]; then
              echo "Parsing variables from $var_file"
              vars=$(python $GITHUB_WORKSPACE/parse_vars.py "$var_file" 2> debug_$layer.log)
              echo "Parsed vars: $vars"
              if [ -z "$vars" ] || ! echo "$vars" | python -c "import json; json.loads(input())" 2>/dev/null; then
                echo "Error: Invalid or empty vars JSON: $vars"
                cat debug_$layer.log
                vars='{"sf_database": "SF_DEVOPS_TEST_DB", "sf_schema": "'$layer'", "new_var": "'$layer'_value"}'
              fi
              database_name=$(echo "$vars" | python -c "import json, sys; print(json.loads(sys.stdin.read())['sf_database'])")
              schema_name=$(echo "$vars" | python -c "import json, sys; print(json.loads(sys.stdin.read())['sf_schema'])")
              echo "Extracted database_name: $database_name"
              echo "Extracted schema_name: $schema_name"
              echo "Step 2: Running schemachange for $layer with vars: $vars"
              ls -la "$GITHUB_WORKSPACE/$layer/migrations/scripts"  # Debug: List scripts
              schemachange_output=$(schemachange \
                -f "$GITHUB_WORKSPACE/$layer/migrations/scripts" \
                -a "$SF_ACCOUNT" \
                -u "$SF_USERNAME" \
                -r "$SF_ROLE" \
                -w "$SF_WAREHOUSE" \
                -d "$database_name" \
                -c "$database_name.SCHEMACHANGE.CHANGE_HISTORY" \
                --create-change-history-table \
                --config-folder "$GITHUB_WORKSPACE/$layer/migrations/config" \
                --vars "$vars" 2>&1)
              echo "schemachange output: $schemachange_output"
            else
              echo "Error: $var_file not found or not readable, skipping $layer"
            fi
          done
          # Generate version_log.yml only for test branch
          if [ "$GITHUB_REF_NAME" == "test" ]; then
            set -x  # Enable debugging
            log_file="$GITHUB_WORKSPACE/version_log.yml"
            current_time=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            # Check if this is a manual trigger
            if [ "$GITHUB_EVENT_NAME" == "workflow_dispatch" ]; then
              # Manual trigger with no schema changes
              new_entry="  - version: \"manual_trigger\""
              new_entry="$new_entry\n    branch: \"test\"\n    timestamp: \"$current_time\"\n    applied: \"no versions updated\""
              if [ -f "$log_file" ]; then
                tmp_file=$(mktemp)
                echo "versions:" > "$tmp_file"
                echo -e "$new_entry" >> "$tmp_file"
                yq eval '.versions[]' "$log_file" | tail -n +2 >> "$tmp_file" 2>/dev/null || echo "Warning: Failed to append existing versions"
                mv "$tmp_file" "$log_file"
              else
                echo "versions:" > "$log_file"
                echo -e "$new_entry" >> "$log_file"
              fi
              echo "Updated version log with manual trigger for test (no versions updated)"
            else
              # Push trigger with schema change check
              if echo "$schemachange_output" | grep -q "scripts_applied=[1-9]"; then
                applied="true"
              else
                applied="false"
              fi
              echo "Debug: Applied status: $applied"
              # Generate new entry
              new_entry="  - version: \"1.0.1\""
              if [ -f "$log_file" ]; then
                current_version=$(yq eval '.versions[0].version' "$log_file" 2>/dev/null || echo "1.0.0")
                new_version=$(echo "$current_version" | awk -F. '{$NF++; print $1"."$2"."$NF}')
                new_entry="  - version: \"$new_version\""
              fi
              new_entry="$new_entry\n    branch: \"test\"\n    timestamp: \"$current_time\"\n    applied: \"$applied\""
              echo "Debug: New entry: $new_entry"
              # Create or update the log file
              if [ -f "$log_file" ]; then
                tmp_file=$(mktemp)
                echo "versions:" > "$tmp_file"
                echo -e "$new_entry" >> "$tmp_file"
                yq eval '.versions[]' "$log_file" | tail -n +2 >> "$tmp_file" 2>/dev/null || echo "Warning: Failed to append existing versions"
                mv "$tmp_file" "$log_file"
              else
                echo "versions:" > "$log_file"
                echo -e "$new_entry" >> "$log_file"
              fi
              echo "Updated version log with version $new_version for test (applied: $applied)"
            fi
            set +x  # Disable debugging
          fi

      - name: Output log file location
        run: |
          if [ -f "$GITHUB_WORKSPACE/version_log.yml" ]; then
            echo "Version log generated at $GITHUB_WORKSPACE/version_log.yml"
            cat "$GITHUB_WORKSPACE/version_log.yml"
          else
            echo "No version log generated"
          fi

      - name: Upload version log as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: version-log
          path: ${{ github.workspace }}/version_log.yml

      - name: Commit and push version log with PAT
        if: github.ref_name == 'test'  # Only run for test branch
        run: |
          if [ -f "$GITHUB_WORKSPACE/version_log.yml" ]; then
            git config --global user.name "JohnsonRohithReddy"
            git config --global user.email "your-email@example.com"  # Replace with your GitHub email
            git add "$GITHUB_WORKSPACE/version_log.yml"
            git commit -m "Update version_log.yml with latest deployment [skip ci]" || echo "No changes to commit"
            # Use PAT with username for push
            git push https://JohnsonRohithReddy:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/JohnsonRohithReddy/snowflake-devops-2.git HEAD:test || {
              echo "Push failed. Check PAT in Secrets (ensure 'repo' scope) or repo write permissions for JohnsonRohithReddy."
              exit 1
            }
            echo "Pushed version_log.yml to test branch"
          else
            echo "No version log to commit"
          fi
        env:
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
