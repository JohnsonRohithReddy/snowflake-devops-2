name: snowflake-devops-demo

# Controls when the action will run. 
on:
  push:
    branches:
      - main
    paths:
      - '**/migrations/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  deploy-snowflake-changes-job:
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Use Python 3.8.x
        uses: actions/setup-python@v2.2.1
        with:
          python-version: 3.8.x

      - name: Install PyYAML
        run: |
          pip install pyyaml

      - name: Run schemachange
        env:
          SF_ACCOUNT: ${{ secrets.SF_ACCOUNT }}
          SF_USERNAME: ${{ secrets.SF_USERNAME }}
          SF_ROLE: ${{ secrets.SF_ROLE }}
          SF_WAREHOUSE: ${{ secrets.SF_WAREHOUSE }}
          SF_DATABASE: ${{ secrets.SF_DATABASE_DEV }}  # Optional override
          SF_SCHEMA_BRONZE: ${{ secrets.SF_SCHEMA_BRONZE }}  # Optional override
          SNOWFLAKE_PASSWORD: ${{ secrets.SF_PASSWORD }}
        run: |
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          python --version
          echo "Step 1: Installing schemachange"
          pip install schemachange
          
          echo "Step 2: Discovering and deploying layers"
          layers=$(ls -d $GITHUB_WORKSPACE/*/ | xargs -n1 basename | grep -v '^\.' || true)
          for layer in $layers; do
            if [ -d "$GITHUB_WORKSPACE/$layer/migrations" ]; then
              echo "Deploying layer: $layer"
              # Parse layer-var.yml with Python
              if [ -f "$GITHUB_WORKSPACE/$layer/migrations/$layer-var.yml" ]; then
                echo "Loading variables from $layer-var.yml"
                vars=$(python -c "import yaml, json; with open('$GITHUB_WORKSPACE/$layer/migrations/$layer-var.yml') as f: data = yaml.safe_load(f); vars_data = data.get('variables', {}); print(json.dumps({'database_name': vars_data.get('sf_database'), 'schema_name': vars_data.get('sf_schema')}))")
              else
                vars='{"database_name": "default_db", "schema_name": "default_schema"}'
              fi
              
              # Extract vars for use
              database_name=$(echo $vars | python -c "import json, sys; print(json.loads(sys.stdin.read())['database_name'])")
              schema_name=$(echo $vars | python -c "import json, sys; print(json.loads(sys.stdin.read())['schema_name'])")
              
              # Override with secrets if set
              database_name="${SF_DATABASE:-$database_name}"
              schema_var="SF_SCHEMA_$(echo $layer | tr 'a-z' 'A-Z')"
              schema_name="${!schema_var:-$schema_name}"
              
              schemachange \
                -f "$GITHUB_WORKSPACE/$layer/migrations/scripts" \
                -a "$SF_ACCOUNT" \
                -u "$SF_USERNAME" \
                -r "$SF_ROLE" \
                -w "$SF_WAREHOUSE" \
                -d "$database_name" \
                -c "$database_name.SCHEMACHANGE.CHANGE_HISTORY" \
                --create-change-history-table \
                --config-folder "$GITHUB_WORKSPACE/$layer/migrations/config" \
                --vars "$vars"
            else
              echo "Skipping $layer: No migrations folder"
            fi
          done
