name: snowflake-devops-demo

on:
  push:
    branches:
      - main
    paths:
      - '**/migrations/**'
  workflow_dispatch:

jobs:
  deploy-layers:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Use Python 3.8.x
        uses: actions/setup-python@v2.2.1
        with:
          python-version: 3.8.x

      - name: Run schemachange for each layer
        env:
          SF_ACCOUNT: ${{ secrets.SF_ACCOUNT }}
          SF_USERNAME: ${{ secrets.SF_USERNAME }}
          SF_ROLE: ${{ secrets.SF_ROLE }}
          SF_WAREHOUSE: ${{ secrets.SF_WAREHOUSE }}
          SF_DATABASE: ${{ secrets.SF_DATABASE }}  # Optional override
          SF_SCHEMA_BRONZE: ${{ secrets.SF_SCHEMA_BRONZE }}  # Optional override
          SNOWFLAKE_PASSWORD: ${{ secrets.SF_PASSWORD }}
        run: |
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          python --version
          echo "Step 1: Installing schemachange"
          pip install schemachange
          
          echo "Step 2: Discovering and deploying layers"
          layers=$(ls -d $GITHUB_WORKSPACE/*/ | xargs -n1 basename | grep -v '^\.' || true)  # Detect all top-level folders
          for layer in $layers; do
            if [ -d "$GITHUB_WORKSPACE/$layer/migrations" ]; then
              echo "Deploying layer: $layer"
              # Parse layer-var.yml with Python to set env vars
              if [ -f "$GITHUB_WORKSPACE/$layer/migrations/$layer-var.yml" ]; then
                echo "Loading variables from $layer-var.yml"
                python -c "import yaml, os; data = yaml.safe_load(open('$GITHUB_WORKSPACE/$layer/migrations/$layer-var.yml')); for k, v in data.get('variables', {}).items(): os.environ[k] = str(v)"
              fi
              
              # Dynamic schema and database (fallback to var.yml if secrets not set)
              schema_var="SF_SCHEMA_$(echo $layer | tr 'a-z' 'A-Z')"
              schema_name="${!schema_var:-$sf_schema}"  # Use secret or var.yml value
              database_name="${SF_DATABASE:-$sf_database}"  # Use secret or var.yml value
              
              schemachange \
                -f $GITHUB_WORKSPACE/$layer/migrations/scripts \
                -a $SF_ACCOUNT \
                -u $SF_USERNAME \
                -r $SF_ROLE \
                -w $SF_WAREHOUSE \
                -d $database_name \
                -c $database_name.SCHEMACHANGE.CHANGE_HISTORY \
                --create-change-history-table \
                --config-folder $GITHUB_WORKSPACE/$layer/migrations/config \
                --vars '{"database_name": "'$database_name'", "schema_name": "'$schema_name'"}'
            else
              echo "Skipping $layer: No migrations folder"
            fi
          done
